#include<bits/stdc++.h>
using namespace std;
int main() {

	ios_base::sync_with_stdio(false);cin.tie(NULL);
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
   int test;
    cin>>test;
    while(test--)
    {
        int n;	cin>>n;
        vector<long long int> com(n);
        for(int i=0;i<n;i++)
        {
            cin>>com[i];
        }
        vector<int> bin;
        vector<int>temp;

        for(int i=0;i<n;i++)
        {

            temp.resize(com[i]);

            if(i%2!=0)
            {
                fill(temp.begin() , temp.end() , 0);
            }
            else
            {
                 fill(temp.begin() , temp.end() , 1);
            }


            bin.insert(bin.end(),temp.begin(),temp.end());

        }

        /*for(long long int z=0;z<bin.size();z++)
        {
            cout<<bin[z];
        }
        cout<<endl;*/
        for(long long int i=bin.size()-1;i>=0;i--)
        {
            if(bin[i]==0)
            {
                bin[i+1]=0;
                bin[i]=1;
                break;
            }

        }
        /*for(long long int z=0;z<bin.size();z++)
        {
            cout<<bin[z];
        }*/
        cout<<endl;
        com.resize(0);
        int count1=0,count0=0;
        for(long long int i=0;i<bin.size();i++)
        {   //cout<<bin[i];
            if(bin[i]==1)
            {
                count1++;
                if(count0!=0)
                {
                com.push_back(count0);
                count0=0;
                }
            }
            else if(bin[i]==0)
            {
                count0++;
                if(count1!=0)
                {
                com.push_back(count1);
                count1=0;
                }
            }
            else ;
        }
        if(count1!=0) com.push_back(count1);
        if(count0!=0) com.push_back(count0);
        cout<<com.size()<<endl;
        for(int i=0;i<com.size();i++)
        {
            cout<<com[i]<<" ";
        }cout<<endl;

    }


}

/*
Compress Bit
Send Feedback
Aahad invented a new type of algorithm for compression of bit. In this compression, large number converted in form of an array. Let say a large number in binary form is B. Now, this binary number is converted into an array as follow:
Let say B = "111001101" converted into an array A = {3 , 2 , 2, 1 ,1 }
a0 = "111" count no of 1's -> 3 ones
a1 = "00" count no of 0's -> 2 ones
a2 = "11" count no of 1's -> 2 ones
a3 = "0" count no of 0's -> 1 ones
a4 = "1" count no of 1's -> 1 ones
Index at odd places in array denotes count of 1's and at even paces numbers of 0's and combine this array binary to form this large number Binary format B.
Harshit is interesting in finding the next smallest number D > B such that setCountbit(B) = setCountbit(D) in this compression format. Help him finding the next number D in this compression format
Input Format
The First line contains no of tasks: T
For each task contains 2 line:
The first line contains a number N denotes the size of array n
Next line contains n space-separated integers denotes elements of the array ai
Output Format
The output for each task contains 2 lines:
Representing the number D in the compression format
The first line contains a number N denotes the size of array n
Next line contains n space-separated integers denotes elements of the array ai
Constraints
1 =< T <= 100
1 <= N <=10
1 <= ai  <= 10^18
Time Limit: 1 second
Sample Input 1:
1
5
4 1 3 2 4
Sample Output 1:
7
4 1 3 1 1 1 3
Explaination
 The number B is representing in binary format as "11110111001111" The smallest binary number > B which as same  setbit as in B is D = "11110111010111" Hence the compression format of D is array size is 7 and array is  {4,1,3,1,1,1,3}





custom sample input


51
4
307114160 1185424124 866129750 716086220
7
1309901456 1205546072 1096748180 279718694 1257070454 1045223798 764126282
2
52628138 161687354
7
241478282 268002668 1442000738 667305740 201190832 37906886 43960892
7
789997358 846399788 890040896 897749954 268481762 977497328 674579258
3
112645550 898490372 1149143642
4
773185514 462166400 1281373586 1068307418
3
1352366606 800972966 234378980
6
367088018 1261774286 330371996 1143917162 1235249900 1453803872
6
903934622 591304010 411164666 455502638 1230241190 65128136
5
163429514 997706384 111469592 43786676 1342479848
1
420702992
1
1017654116
7
1068046094 723316184 324317990 1092654104 699797024 684814448 1385816078
2
185772716 886164590
8
1080197660 900319640 848141948 546922484 247532288 352497428 637993898 1177061756
1
1444091330
3
524405066 272401622 969309176
7
121922552 1029892790 751669838 241739606 1386425834 233290130 1322967656
1
463734344
2
131678648 1410728966
3
249927758 1283202854 1203891020
1
304326704
6
1197488582 709509566 253237862 750406772 1075929368 610075784
2
842915468 1004892794
8
1061512994 709553120 206809298 556155932 1222445024 81330224 769091438 977410220
7
180633344 1386077402 1346181938 815520002 525014822 704457302 566391122
2
483464306 682157654
6
1434073910 456243056 1086164558 840824876 310946912 1117741208
3
598751744 746094926 1301626196
5
1450711538 848403272 103324994 789518264 308203010
1
925711622
5
313603706 1233115754 207244838 188124632 1091783024
4
1374274268 439518320 511208204 231417308
6
1222357916 1041652370 887863196 1097619260 391913798 237427760
6
118307570 1181852696 1248054776 331765724 196225676 820746482
4
193612436 679892846 1104762116 1010467706
8
136687358 654500864 319439942 1024840526 445615880 654457310 362950388 855938114
4
928455524 259858070 750711650 1405633148
7
1351059986 302323220 510685556 285772700 1451495510 684074030 1455546032
4
923446814 165955646 655938146 1360641866
4
1307985080 445136786 355633316 1128803924
3
319483496 927584444 893438108
7
696791798 884422430 937079216 1251147110 1214039102 922880612 1060075712
3
566608892 294222176 1084335290
7
1322924102 377845856 300885938 894265634 1028107076 865563548 532593218
3
145964360 1088385812 904718594
1
1017567008
3
244047968 853324874 1269614006
6
908507792 1069744700 92915588 984248198 1424884016 480807512
4
467697758 279457370 186164702 1271486828


--------------------------------------------------------------------------------------------


51
8
2788141960 11565474124 8374627050 6875177020 5027088536 12809430056 11766561472 10679296980
6
12281466954 10164391498 7355262182 4366808218 244952838 1334828854
3
2132214182 2397283868 14129555438
5
1729604232 97836986 158337292 5420558152 7613803058
7
8613581496 8690621454 2402071662 9487571528 6460379958 5053203776 844732850
3
11202907542 11477988070 7445795014
5
12524338686 10395076118 13664268912 13233802706 7723487066
5
6621423938 3387486718 12328474386 3020567596 11150677062
5
14247509272 14288858402 8752427522 5628174310 3827963766
2
12013350490 369870736
7
1352239014 9689529384 832980992 156596276 13135000048 3965939284 3923284392
5
9888875716 11977224408 10392464594 6947429184 2960067290
1
6712392024
7
13568077778 10648393946 1575524316 8574843890 5525454366 10513900460 8716301440
7
5184650484 2192714488 3241676628 6094766598 11481905356 7406186900 14150447630
7
4959624166 2441244522 9405743776 7046667096 937441952 10011182090 7230779538
4
13574171334 2050386430 12940006256 9913249940
1
6114788282
7
13817043066 9774839168 2216653458 12542619354 11750021820 8332407412 2760285704
10
11686039482 6809453666 2249732762 7218157172 10471245568 5815768784 4018605018 8142636668 9761346294 10811178942
6
6809888920 1785751998 5276924332 11935440024 531785224 7404881138
5
6110000488 1524164344 13570689302 13171996638 7868861902
8
6758964202 5379209022 12110847386 4550485406 6536114154 3908921010 14050339210 4278451656
2
8121744476 2826444312
7
12003339648 5702602744 7175067026 12726731796 422971724 14216606238 8197478672
6
7609015264 2799023310 12054699620 8970054522 9410096316 2852994806
6
1790104538 1599028032 10629678024 4510442038 13452735468 4111314120
1
2031670508
2
11934569516 10128700670
9
10688002060 3635581498 2091735560 54311586 901315870 11529783296 12191369376 3034495724 1679985276
8
234506742 1653870036 6513480946 10759383716 9817058806 7781811102 1084993058 6259727864
8
9960692626 4172249680 6259292610 3346137588 8272777614 7626860678 8997475524 2315891370
10
13766118348 9954163816 13220745086 2740264020 4822519156 2574867500 14224440810 6555265330 14264919432 1421879654
6
1377483746 6274091246 13316500966 721991222 12790278880 4167461886
9
10999643924 5888891456 2911754096 8988770444 8647531308 6472131816 6682359498 8557433730 9083655816
10
11851436002 8941763012 10312813112 8099981776 5381385292 2659306776 10555249590 7948513384 12939571002 3494994456
2
8655801134 9993336676
7
5041451918 7083228432 1177702160 10595728212 8760262094 8879086436 9888005208
3
2157894168 8246662374 12406820106
10
8798129192 10409439500 647562788 9555035898 13958500616 4523934912 8149165478 4392923458 2511755670 1579441602
7
12171347692 10646652930 2240157174 4693683972 1162903524 1123730664 9172882886
10
7805314818 6424253876 5864081978 4291944530 6671042894 7179419566 2208383632 4638406714 10556555352 4507830514
9
13709535328 12486906842 10371572402 4310660452 13494519852 1845817050 968780240 11226411258 7512824130
7
13667315690 1061924596 12519550892 9356560074 4625349094 1525905360 7234261570
2
4171379172 13151974954
1
9484089496
4
7055807430 5438403566 7116742990 11346106108
8
5484540490 9845785570 7620767122 8677999088 5667347170 115247146 10126959654 1466275562
7
12342837768 7041008794 10689743076 7118048752 5452331694 11232069560 7915434080
2
13661657388 9028378558
7
5368762926 1908493626 10631854294 13604639114 8759391586 428194772 4735468356

*/
